Event Propagation: order in which events on nested elements will be called

<html>
<head></head>

<body>
<div id="div1"><div id="div2"><p id="p1">
sometext
</p></div></div>
</body>
</html>

What typically happens - bubbling
p1 -> div2 -> div1 -> body -> html

capturing -> root -> target (reverse of bubbling)
specify with useCapture param

hypertext transfer protocol
verb/methods
- get request: generally for retrieving data, send parameters in our url
	- no data in request body
	- metadata in header
- post request: generally for sending data
	- request body of unlimited size
	- better for sensitive data

put, delete, trace, options, head

status code
100-199 infor
200-299 ok
300-399 redirect
400-499 bad request
500-599 internal server error

AJAX - interact with this system in javascript

asynchronous javascript and xml (also json)

async - can send multiple requests simultaneously without them blocking each other

ajax is not a language, more of a workflow, a set of interactions between the xml, the http requests object + DOM



XmlHttpRequest
- From window object 
- Few older browsers don't support

Method
abort() -> cancel requests

geAlltResponseHeaders()

open(verb, url, async, username, password)
how we prepare requests
send(content)

Properties
readyState -> status of request
0 not initalized
1 server connection established
2 request recieved
3 server is processing
4 respose is reading


onReadyStateChange ->
function defining how to handle requests at various ready states

responseText/responseXml/status/statusText

Workflow:
- Create xhr object
- Define onReadyStateChange
- Prepare request with xhr.open
- Send it

----------

gotchas js
- loose typing/type coercion
- semicolon injection - adds them when it thinks you're at the end of a line
function thing() {
	//stuff
	return stuff;
} - puts semicolon here if one isn't here
- implicit globals
hoisting - js hoists variable declarations to the top of the scope
		- watch out for naming clashes
strict mode, put "use strict" on file, prevents first three issues

error handling
throw, try, catch statements
js has errors, not exceptions

referenceerror, typeerror, rangeerror, syntaxerror, evalerror, uriencodeerror

----------

new es6 (ECMAscript) 6

- template literals
	` indicates formatted string
- fat-arrow notation
- blockscope using let keyword
- class
- modules for import/export
- const keyword

----------

Business requirements (user stories/requirements)

SDLC - software development life cycles

bigbang - everything all at once
"fine" for small project/small team
no structure
all decisions made in the moment

waterfall

linear, sequential progression
like bulding a bridge - requirements don't change
low overhead
large project with well-defined end

iterative
repeating cycle, modular requirement
like building a village
loderate overhead - need to make sure existing structure is not broken on new features
testing can get more complex

agile
martin fowler - agile manifesto
iterative implementation
break requirements to small isolated pieces (user stories)
product owner to which devs are accountable
stories move through stages of completion

backlog, in-progress, testing,  code-review, done, released

Two major approaches:
scrum: short (2-3 weeks) sprints to act on specific user stories
stories use numeric values  "points"
begin sprint with planning session + end with retrospective
daily standout


scrum master - project owner, keep everyone on track

kanban: longer-running/larger projects
stories still move through stages, but not correlated to sprint

"swimwings" features move at different pace
less direct management, still need super user































