yesterday - orm concept

implementation - hibernate.cfg.xml - credentials, url, mappings - which classes are being mapped
mapping strategies - xml or annotations
xml - need hbm file for every mapped entity
annotations - jpa 

key interfaces - 

Configuration -> SessionFactory -> Session

Query - write in HQL

Criteria - DQL

Transactions

Today - Object States, Session Methods, Queries and Criteria, Cacheing, TX Management, Inheritance

Contextual Sessions - object in hibernate exist within a persistent context
the session that we get from SessionFactory is scoped to a particular set of interactions with the the db

Object States - objects in hibernate have a "state" relative to persistence context.

When you creat an object in java, no guarantee that it has a DB representation (a persistent identity)

1. transient - javaside only
	no representation in persistence context. Java object created with "new" keyword, no valid primary key

2. persistent - has persistent identity, has a primary key value, valid within session even if commit has not occurred

cached by session

automatic dirty checking - at close of session / end of unit of work, hibernate will check whatever persisent objects have been changed and update db accordingly

3. detached - objects that were persistent, but no longer associated with session

can reattach

lazy fetching - load proxy object - placeholder containing pk_id

default strategy for hibernate

eager fetching - get entire object, immediately

data retrieval - get - eagerly fetch single object by pk to all related objects
		- load - lazily fetch single object
get proxy object with is filled when object is accessed

LazyInitializationException - unchecked
ObjectNoteFoundException

Data Insertion - save and persist
save - inserts object immediately and returns generated primary key (int return type), not necessarily immediately persistent (less controlled) allowing hibernate to control when commit occurs

persist - takes transient object, immediately makes it persistemt
void return type, executes as part of a declared transaction

Data Modification
update - bring representations of object in db into persistent state
if there is already a persistent entity with same id in the session, a NonUniqueObjectException may be thrown

Good for objects that are transient (or detached), where you dont want to retrieve them, just want to update the db

merge - will not throw NonUniqueObjectException
-  check whether a persistent object with given id exists, if none does, brings existing representation into context. Then copies values of provided object onto persistent object.
rely on automatic dirty checking to save changes.

saveOrUpdate - brings privided object into persistent state whether it is transient, persistent, or detached

Caching - storing results in runtime memory

Can provide speed improvements if running query multiple times

Level 1: (Query Caching, disabled by default)
Within scope of session, not shared between threads
Associated with session object
Happens by default

evict - remove one object
clear - remove all object
contains - check if object is present in cache

if doing a lot of work, may want to periodically clear cache to avoid memory running out - has a size limit
possibility of stale data - watch out

Level 2: ()
Scoped to SessionFactory
allows you to keep cache between sessions
some config -> need a 3rd party like ehcache or apache ignite
readonly if not expecting info to change between sessions
read-write if want to check for updates (good if cached objects include persistent objects from sessions)

hibernate.cache.use-second-level-cache - false property by default

-----

transaction management

transaction - a unit of work on our database

Atomicity - all or nothing
Consistency - DB is in valid state before or after transaction
Isolation - concurrent transaction behave as if they were sequential
Durability - all commits are final

		|Dirty Read	Nonrepeatable Read	Phantom Read
________________|________________________________________________________
read-uncommited	|v		v			v
read-commited	|x		v			v
repeatable read	|x		x			v
serializable	|x		x			x


----
inheritance

Animal - id, name, cave
Bat extends Animal - wingspan

Bear extends Animal
BEAR_TYPE

table-per-hierarchy one table for entire hierarchy <- good if subclasses are similar
id	name	cave	wingspan	BEAR_TYPE	Type	<- discriminator call, which thing in hierarchy is being dealt with
3	Bob	3	null		2		1 (Bear)
17	Joe	3	30		null		2 (Bat)
52	Fred	5	null		null		0 (Animal)

table-per-subclass <- good if subclasses are different, and if you want to treat bat/bear as animals
Animal

A_ID	name	cave
3	Bob	3
17	Joe	3
52	Fred	5

Bat
A_ID	wingspan
17	30

Bear
A_ID	beartype
3	2

table-per-concrete-class - like subclass but with animal fields
Animal 	- ID, Name, Cave
Bat	- Id, Name, Cave, Wingspan
Bear	- ID, Name, Cave, Beartype

hibernate maintains active connections - default size = 20

JNDI - java naming and directory interface
allows distributed applications to access services independently
configure a datasource on a tomcat server!
